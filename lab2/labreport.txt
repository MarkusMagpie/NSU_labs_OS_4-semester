Систе́мный вы́зов — обращение прикладной программы к ядру операционной системы для выполнения какой-либо операции.
A system call is a way for programs to interact with the operating system. (Взаимодействие между user space и kernel space; 
    картинка: https://phoenixnap.com/kb/system-call#:~:text=System%20calls%20enable%20processes%20to,%2C%20and%20I%2FO%20devices.)

Можно сказать про различные виды:
https://www.geeksforgeeks.org/introduction-of-system-call/



2.1
? какую проблему решает системные вызовы (историческая справка)
примерно так обстояли дела в старых системах MS/DOS: 
    не было разделения между кодом ядра и пользовательским кодом, 
    пользовательский код мог свободно напрямую обращаться к оборудованию.

    Справка: MS-DOS (англ. MicroSoft Disk Operating System) — однозадачная дисковая операционная система для компьютеров на базе архитектуры x86. 
    https://ru.wikipedia.org/wiki/MS-DOS

    2 основные проблемы: 
        1) отсутствие разделения между пространствами работает в однопользовательской и/или однозадачной системе, 
            но как только в системе одновременно запускается несколько программ, необходимо синхронизировать 
            доступ к оборудованию и использование памяти - эти задачи возлагаются на ядро.
        2) нет защиты системы от плохо написанной программы. В современных ОС ошибочная программа может завершиться сбоем, 
            но сама система должна продолжить работу. А в MS/DOS сбой программы приводил к перезагрузке системы.
    
    Все современные ОС используют изоляцию между пользовательскими процессами и процессами ядра. Значит, что нужен способ, 
        позволяющий пользовательскому процессу запрашивать привилегированные действия у ядра (например тот же syscall write). 
        Именно для этого и существуют системные вызовы.

Откуда брал ответ: https://stackoverflow.com/questions/50626460/why-do-system-calls-exist
User space and Kernel space: https://en.wikipedia.org/wiki/User_space_and_kernel_space#:~:text=Kernel%20space%20is%20strictly%20reserved,one%20address%20space%20per%20process.



? разница в поведении функций int (interrupt) и call() 
Команда INT n обеспечивает программную генерацию прерывания и передачу управления в соответствующий обработчик.
https://www.club155.ru/x86cmd/INTn

Инструкция CALL выполняет следующие действия:   1) Передаёт управление процедуре.
                                                2) Записывает в стек адрес следующей команды (из регистра IP в 16-разрядном режиме или EIP - в 32-разрядном).
команда CALL передаёт управление по адресу, который передаётся в команду в качестве параметра. Процессор начинает выполнять команду, расположенную по этому адресу.
https://av-assembler.ru/instructions/call.php
https://www.club155.ru/x86cmd/CALL

Различия: 
    1) Назначение
    INT используется для вызова обработчиков прерываний, переходя из пользовательского режима в режим ядра (с переключением привилегий)
    CALL применяется для обычных вызовов подпрограмм в рамках одного адресного пространства (без смены режима и без обращения к таблице векторов прерываний)
    2) Механизм перехода
    INT сначала ищет адрес обработчика через таблицу векторов прерываний, и, в защищённом режиме, возможность осуществить переключение уровней привилегий.
    CALL просто передаёт управление процедуре непосредственно по указанному адресу

INT n в общем ведет себя как дальний вызов командой CALL, за исключением того, что регистр флагов помещается в стек перед адресом возврата.



? разница call и jmp
jmp выполняет переход на указанный адрес, не сохраняя адрес возврата
call тоже выполняет переход, но при её выполнении адрес следующей инструкции (то есть адрес возврата) сохраняется в стеке, 
    что позволяет после завершения подпрограммы вернуться туда с помощью команды ret.

можно сказать так:
1   jmp - transfers the program's control to a specified location in the code
2   call - push return adress on top of stack (return adress of current proccess)
    ret - transfer program to return adress located on top
    
    call stores the location where it will return (below the call instruction) in the stack, 
        jmp to the label, and then at the ret instruction, 
        jmp back to what location was stored (as said above, below the call instruction)

Откуда смоттрел: https://stackoverflow.com/questions/32793117/assembly-call-vs-jmp + оборванная тетрадка по ЭВМ 



(Не мой вопрос)
? разница call и syscall (function call vs system call)
    1)  A system call is a call into kernel code, typically performed by executing an interrupt (int 0x80). 
        The interrupt causes the kernel to take over and perform the requested action, then hands control back to the application. 
        Пример: 
            const char msg[] = "Hello, world!\n";
            syscall(SYS_write, 1, msg, sizeof(msg) - 1); // функция syscall вызывает системный вызов write() для записи строки в стандартный вывод
        
        syscall - переход в режим ядра для выполнения системного вызова
    2)  ?



2.2
? если использовать write - можно получить проблему которой нет с использованием printf - какую
Про write из unistd.h : https://pubs.opengroup.org/onlinepubs/7908799/xsh/write.html



1
    a 
        i 
        Сделал hello.c, скомпилировал: gcc -o hello hello.c и запустил strace ./hello далее ответы на вопросы:

        Какие системные вызовы были вызваны в процессе исполнения программы? 
        Чем обусловлено такое количество системных вызовов?
        Какой системный вызов используется для вывода “hello world”? 
        Изучите этот вызов и разберитесь что он принимает и возвращает.

        Системные вызовы: openat, mmap, mprotect, read, close
            int openat(int dirfd, const char *pathname, int flags);
            Это системный вызов в Linux, позволяет открывать файлы относительно указанного каталога. Он является расширенной версией open().
            Получив в pathname имя файла, open() возвращает файловый дескриптор - небольшое, неотрицательное значение для использования в последующих системных вызовах.
            Вызов open() создаёт новое открытое файловое описание — запись в системной таблице открытых файлов. 
                В этой записи хранится смещение и флаги состояния файла (смотрите ниже). 
                Файловый дескриптор — это ссылка на открытое файловое описание; 
                    с этой ссылкой ничего не происходит при последующем удалении pathname или переуказании имени на другой файл.
            Про openat: https://ru.manpages.org/openat/2

            Пример работы из вывода strace:
            openat(AT_FDCWD, "/lib/x86_64-linux-gnu/libc.so.6", O_RDONLY|O_CLOEXEC) = 3 - открыл libc.so.6 для чтения 
            ...
            close(3)  - закрытие файла libc.so.6

            void * mmap(void *start, size_t length, int prot , int flags, int fd, off_t offset);
            Функция mmap отражает length байтов, начиная со смещения offset файла (или другого объекта), 
                определенного файловым дескриптором fd, в память, начиная с адреса start. 
            Последний параметр (адрес) необязателен, и обычно бывает равен 0. 
            Настоящее местоположение отраженных данных возвращается самой функцией mmap, и никогда не бывает равным 0.
            Аргумент prot описывает желаемый режим защиты памяти (он не должен конфликтовать с режимом открытия файла). 
                Оно является либо PROT_NONE либо побитовым ИЛИ одного или нескольких флагов PROT_*.
            Про mmap: https://www.opennet.ru/man.shtml?topic=mmap&category=2&russian=0

            ssize_t read(int fd, void *buf, size_t count);
            read() attempts to read up to count bytes from file descriptor fd into the buffer starting at buf.
            https://linux.die.net/man/2/read

            close - close a file descriptor
            https://man7.org/linux/man-pages/man2/close.2.html

            int mprotect(const void *addr, size_t len, int prot);
            mprotect контролирует доступ к области памяти. Если программой производится запрещенный этой функцией доступ к памяти, 
                то такая программа получает сигнал SIGSEGV.
            Про mprotect: https://www.opennet.ru/man.shtml?topic=mprotect&category=2&russian=0

            write(int fd, const void buf[.count], size_t count);
            write() writes up to count bytes from the buffer starting at buf
                to the file referred to by the file descriptor fd.
            системный вызов, который используется для записи данных из буфера в файл или другое устройство, представленное файловым дескриптором.
            RETURN VALUE: On success, the number of bytes written is returned.  On error, -1 is returned, and errno is set to indicate the error.
            Про write: https://man7.org/linux/man-pages/man2/write.2.html

            exit_group() - exit all threads in a process


        Вывод текста происходит с помощью системного вызова write(1, "Hello, world!\n", 14Hello, world!) = 14
            записываем строку "Hello, world!\n" длиной 14 байт в файловый дескриптор 1 (консоль?) 
            Return value = 14 -> все 14 байт были успешно записаны

        +++ exited with 0 +++, in the last line states that exit status is 0 which means there was no error. 
            In case of an error, the exit code is -1.

        ? Че так много вызовов ?
        - The only actually necessary system calls for a Hello-World are write(stdout, "Hello World", 11) and exit(). 
        Any others are coming from the runtime library of the language you used for development, and are there to 
        support features used in more complex programs.



        ii
        Используйте сискол в программе hello world вместо printf(). 
        Убедитесь что этот вызов присутствует в выводе strace.

        https://man7.org/linux/man-pages/man2/write.2.html

        ssize_t write(int fd, const void buf[.count], size_t count);
        fd - file descriptor в который и будут записаны данные, у меня равен 1 - это стандартный вывод.
        buf - указатель на буфер с данными ("Hello, world!\n")
        count - количество байт для записи
        ! в случае успешной записи нам вернется 14 - число записанных байт 

        компиляция и запуск с strace новой программы: 
        gcc -o hello_write hello.c
        strace ./hello_write

        Да, действительно вывод присутствует в выводе trace: write(1, "Hello, world!\n", 14Hello, world!) = 14

        Разница между write() и printf(): https://stackoverflow.com/questions/21084218/difference-between-write-and-printf



        iii
        напишите свою обертку над этим сисколом. Для этого используйте функцию syscall() из libc. 
        Также проверьте вывод strace.

        компиляция и запуск с strace:
        gcc -o hello_syscall hello.c
        strace ./hello_syscall

        в выводе strace опять вижу write(1, "hello, world!\n", 14hello, world!) = 14 а значит вызвал write() 
            через syscall 

    b   Запустите под strace команду ‘wget kernel.org’ (если нет wget, используйте curl). 
        Получите статистику использования системных вызовов порожденным процессом.
    strace wget kernel.org

    вообще чтобы собрать статистику системных вызовов, можно сделать так: strace -c wget kernel.org

    wget - утилита для загрузки файлов из сети. В нашем случае она пытается загрузить содержимое с сайта 
    kernel.org, а при этом strace перехватывает и выводит все системные вызовы, 
    которые выполняются процессом wget

2 Разберитесь как устроена функция syscall(). Напишите код, который напечатает hello world без использования функции syscall().
    Разбор ассемблерных вставок:

    volatile чтобы предотвратить оптимизацию вставок компилятором
    In AT&T however registers are prefixed with a '%' and immed's are prefixed with a '$'.
    
    https://imada.sdu.dk/u/kslarsen/dm546/Material/IntelnATT.htm

    __asm__ volatile (
        "movl $4, %%eax \n\t"     // в регистр eax номер системного вызова для записи (write) = 4
        "movl $1, %%ebx \n\t"     // 1 параметр: файловый дескриптор; дескриптор файла в ebx равен 1 - стандартный вывод (stdout) = 1
        "movl %0, %%ecx \n\t"     // 2 параметр: загрузка адреса строки str в регистр ecx
        "movl %1, %%edx \n\t"     // 3 параметр: длина строки len
        "int $0x80     \n\t"      // вызов прерывания - https://stackoverflow.com/questions/1817577/what-does-int-0x80-mean-in-assembly-code
        // In Linux, 0x80 interrupt handler is the kernel, and is used to make system calls to the kernel by other programs.

        :                        // выходных операндов нет
        : "r" (str), "r" (len)     // входные операнды
        : "eax", "ebx", "ecx", "edx" // Затрагиваемые регистры
    );

    __asm__ volatile (
        "movl $1, %%eax \n\t"     // номер системного вызова для завершения программы в eax = 1 (exit)
        "xorl %%ebx, %%ebx \n\t"   // обнуляет регистр ebx, что задаёт код возврата 0
        "int $0x80     \n\t"
    );


    _start:
        movl    $write, %eax    // system call number (sys_write)
        movl    $1, %ebx        // file descriptor (stdout)
        lea     str, %ecx       // message to write
        movl    $len, %edx      // message length
        int     $0x80           // call kernel

        movl    $exit, %eax     // system call number (sys_exit)
        xorl    %ebx, %ebx 
        int     $0x80
    .data
    str:    .ascii "Hello, world!\n"
    len = . -str
    .globl  _start

    Скомпилируем программу: as -o hello.o hello.S - создан объектный файл hello.of
                            ld -o hellob hello.o - линковка объектного файла в executable файл

    https://www.tutorialspoint.com/assembly_programming/assembly_registers.htm
    https://stackoverflow.com/questions/1690893/hello-world-without-using-libraries


? почему мы вызываем функцию syscall() чтобы написать ассемблерную вставку?