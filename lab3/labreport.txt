1
    создаю целевую директорию с перевёрнутым именем
    копирую только регулярные файлы
    переворачиваю как имена файлов, так и их содержимое

    тест: 
        mkdir testdir
        cd testdir/
        touch file1.txt
        echo "hello" > file1.txt
        cd ../
        gcc copy_reversed.c -o copy
        ./copy testdir

    про . и ..:
        ls -a	    list all files including hidden file starting with '.'.
        https://askubuntu.com/questions/54900/what-do-and-mean-when-in-a-folder
    
    про функции:
        main
            stat 
                информация о файлах

                https://www.opennet.ru/man.shtml?topic=stat&category=2&russian=0
            strdup 
                использую для создания копий строк argv[1], ибо basename может модифицировать переданную ему строку
            basename 
                извлечение последнего компонента из пути к файлу. ПРИМЕР: /home/user/docs/file.txt вернет file.txt
                ! если передавать в basename() оригинальный аргумент argv[1], функция может изменить его, что приведет к ошибкам 

                https://www.opennet.ru/man.shtml?topic=basename&category=3&russian=2
            dirname
                dirname() returns the string up to, but not including, the final '/'

                https://man7.org/linux/man-pages/man3/basename.3.html
            mkdir 
                Функция mkdir() создает каталог, используя путь, на который указывает параметр path.
                про права доступа: https://www.managedserver.eu/website-permissions-on-linux-750-and-650-vs-755-and-644/#:~:text=The%20755%20permission%20for%20directories,allows%20everyone%20to%20read%20them.

                https://www.c-cpp.ru/content/mkdir
            opendir
                открывает поток каталога и возвращает указатель на структуру типа DIR, которая содержит информацию о каталоге

                https://www.c-cpp.ru/content/closedir-opendir-readdir-rewinddir
            про dirent: https://firststeps.ru/linux/r.php?20

        copy_file_reversed
            fopen
                открывает файл, имя которого указано аргументом fname, и возвращает свя­занный с ним указатель
                Open a file and create a new stream for it
                stream нужно потом закрыть с помощью fclose

                https://www.c-cpp.ru/content/fopen
            fseek
                устанавливает указатель положения в файле, связанном со stream, в соответ­ствии со значениями offset и origin
                у меня offset 0
                SEEK_END - макрос для origin - значит указатель в конец файла

                короче - помещаем указатель В КОНЕЦ файла
                
                https://www.c-cpp.ru/content/fseek
            ftell
                так как указатель в конце файла, вернет текущую позицию (размер файла в байтах)

                https://www.c-cpp.ru/content/ftell
            rewind
                Функция rewind() перемещает указатель положения в файле на начало указанного потока
                возвращает указатель в начало для последующего чтения

                https://www.c-cpp.ru/content/rewind
            size_t fread(void *buf, size_t size, size_t count, FILE *stream)
                Функция fread() считывает count объектов — каждый объект по size символов в длину — из потока, 
                указанного stream, и помещает их в символьный массив, указанный в buf. 
                Указатель пози­ции в файле продвигается вперед на количество считанных символов.

                fread(buffer, 1, filesize, src)

                https://www.c-cpp.ru/content/fread
            size_t fwrite(const void *buf, size_t size, size_t count, FILE *stream)
                Функция fwrite() записывает count объектов — каждый объект по size символов в длину — в поток, 
                указанный stream, из символьного массива, указанного buf. 
                Указатель позиции в файле продвигается вперед на количество записанных символов.

                fwrite(buffer, 1, filesize, dest)

                https://www.c-cpp.ru/content/fwrite
            int ferror(FILE *stream)
                проверяет наличие ошибок чтения или записи в файле, связанном с потоком stream.

                https://www.c-cpp.ru/content/ferror
            fclose

    про симлинки, хардлинки и inode? 
        жёсткие ссылки (хардлинки) — это как файлы - дополнительные указатели напрямую на inode (информационный узел файловой системы).
        hardlink - это ещё одно имя для существующего inode.
        Пример: file.txt и его hardlink — два имени для одних и тех же данных.

        символические ссылки (симлинки) — это отдельные файлы (со своим inode и данными), которые хранят путь к другому файлу в файловой системе.
        это отдельный файл, который хранит путь к целевому файлу.
        Пример: symlink - указывает на /home/user/file.txt.

        НАГЛЯДНО: есть книга.txt - командой ln книга.txt хардлинк_книги.txt создал хардлинк.
                    хардлинк - просто второе название книги (резервная копия книги). если удалить книгу, то она доступна через хардлинк

                    ln -s книга.txt симлинк_книги.txt - создал ЗАКЛАДКУ "книга лежит на полке 10". перименую или удалю книгу и закладка не валидна.

        inode - структура данных в файловой системе, которая хранит метаинформацию о файле:
            Тип файла (обычный файл, каталог и т.д.),
            Права доступа,
            Временные метки,
            Указатели на блоки данных файла.
        Каждый файл имеет уникальный inode в пределах своей файловой системы. 

        Ответ: https://askubuntu.com/questions/108771/what-is-the-difference-between-a-hard-link-and-a-symbolic-link#:~:text=Hard-links%2C%20are%20just%20like,filesystem%20path%20to%20a%20file.
               . и .. - хардлинки: https://askubuntu.com/questions/54900/what-do-and-mean-when-in-a-folder

               по-русски про иноды, линки: https://alishoff.com/blog/213
               

    ? что такое директория
    -   Книга Иртегова [страница 632]
        Каталог - таблица преобразования имен в адреса. В каталоге хранится имя файла + его метаданные. 
        Метаданные могут хранить в специальной структуре данных - inode, тогда запись в каталоге содержит имя и указатель на инод.

        Можно сказать: каталог хранит список пар: имя файла - inode, а inode уже хранит метаданные: тип файла, inode ID, size, права доступа и тд ...  

        просмотр содержимого каталога с inode (1 колонка - номер inode): ls -li lab3/
        просмотр метаданных inode (Inode: 1441796 - уникальный идентификатор inode; Links: 2 - количесвто hardlinks на эту inode): stat copy

    - 2 вариант открой википедию: https://ru.wikipedia.org/wiki/Каталог_(файловая_система)
      есть вариант структуры директории здесь: https://blogs.oracle.com/linux/post/directory-entry-lookup-in-ext4



    ? за что отвечает флаг b в fopen
    - открытие файла в двоичном режиме для чтения (если файла нету то fopen вернет NULL)

        кросплатформенность - на Unix системах (это линукс и макос) нет разницы между "r" и "rb", на Windows - есть. Использование "rb" гарантирует одинаковое поведение.
        в двоичном режиме данные читаются без преобразований:
            - если открывать файл с флагом "r" - то есть в текстовом режиме, 
                символы конца строки (EOL) в зависимости от ОС по-разному преобразуются:
                Windows: конец строки представлен двумя символами: \r(возврат каретки) + \n(перевод строки)
                в текстовом режиме эти 2 символа преобразуются в 1

                ПРИМЕР: 10 строк, каждая заканчивается на \r\n (например Hello\r\nWorld\r\n)
                        открываю в режиме "r" на Винде -> 100 + 10*1 = 110 а общее число символов 120!
                        Если же читать в бинарном режиме "rb" то символы читаются без преобразований -> 120

        описание rb: https://www.geeksforgeeks.org/c-fopen-function-with-examples/
        r vs rb: https://www.vbforums.com/showthread.php?395162-fopen-s-quot-r-quot-vs-quot-rb-quot



    ? переписать copy_file_reversed на posix api + копировать права файла
    - новые функции:
        open(src_path, O_RDONLY)
            открытие исходного файла src_path только для чтения

            https://www.opennet.ru/man.shtml?topic=open&category=2
        open(dest_path, O_WRONLY | O_CREAT | O_TRUNC, src_stat.st_mode)
            создание целевого файла для записи
            O_WRONLY - открыть только для записи
            O_CREAT - создать если еще не существует 
            O_TRUNC - если же файлик уже существет, то обрезать длину до 0

            Аргумент mode задает права доступа, которые используются в случае создания нового файла.
            в моем случае: src_stat.st_mode - права копируются из исходного файла
        lseek(src_fd, 0, SEEK_END)
            Функция lseek устанавливает смещение для файлового дескриптора src_fd в значение оффсета - в 0 в соответствии с директивой
                SEEK_END - Смещение устанавливается как размер файла плюс offset байт.

            проще говоря, переметил указатель в конец файла

            https://www.opennet.ru/man.shtml?topic=lseek&category=2&russian=0
        pread(src_fd, buffer + read_total, filesize - read_total, read_total)
            записывает максимум filesize-read_total байтов из описателя файлов src_fd, начиная со смещения read_total (от начала файла), 
                в буфер buffer+read_total. Текущая позиция файла не изменяется.

            Про разницу в pread и read: https://www.quora.com/What-is-the-difference-between-the-read-and-pread-system-calls-in-Unix

            https://www.opennet.ru/man.shtml?topic=pread&category=2&russian=0
        pwrite(dest_fd, buffer + write_total, filesize - write_total, write_total);
            записывает максимум filesize-write_total байтов из буфера buffer+write_total в описатель файла dest_fd, 
                начиная со смещения write_total. Текущая позиция файла не изменяется.

            https://www.opennet.ru/man.shtml?topic=pwrite&category=2&russian=0
        fchmod(dest_fd, src_stat.st_mode)
            копируем права из исходного файла

            https://www.opennet.ru/man.shtml?topic=fchmod&category=2&russian=0
        close
            закрывает файловый дескриптор, который после этого не ссылается ни на один и файл и может быть использован повторно.

            https://www.opennet.ru/man.shtml?topic=close&category=2&russian=0



    ? как работает макрос S_ISDIR(m)
    - макрос проверяет, установлен ли в поле st_mode флаг, соответствующий каталогу. Его реализация обычно выглядит так:
        
        /* Из stat.h
        /* Encoding of the file mode.  */
        #define	__S_IFMT	0170000	/* These bits determine file type. (первые 4 бита st_mode отвечают за тип) */

        S_IFMT — маска для выделения битов типа файла (первые 4 бита в st_mode)
        S_IFDIR — конкретное значение, соответствующее каталогу (второй бит слева 16-ричного числа)
        */

        #define S_ISDIR(mode)    (((mode) & __S_IFMT) == S_IFDIR) 

        st_mode: 16 бит. 
            0-3 - тип файла: из stat.h:
                /* File types.  */
                #define	__S_IFDIR	0040000	/* Directory. (маска второго бита слева 16-ричного числа) */
                #define	__S_IFCHR	0020000	/* Character device.  */
                #define	__S_IFBLK	0060000	/* Block device.  */
                #define	__S_IFREG	0100000	/* Regular file.  */
                #define	__S_IFIFO	0010000	/* FIFO.  */
                #define	__S_IFLNK	0120000	/* Symbolic link.  */
                #define	__S_IFSOCK	0140000	/* Socket.  */ 

            4-6 - специальные биты(SUID, SGID, sticky bit)
                /* Protection bits.  */
                #define	__S_ISUID	04000	/* Set user ID on execution. (файл выполняется от имени владельца) */
                #define	__S_ISGID	02000	/* Set group ID on execution.  */
                #define	__S_ISVTX	01000	/* Save swapped text after use (sticky).  */

            7-9 - owner's rights: rwx
                #define	__S_IREAD	0400	/* Read by owner.  */
                #define	__S_IWRITE	0200	/* Write by owner.  */
                #define	__S_IEXEC	0100	/* Execute by owner.  */

            10-12 - group's rights 

            13-15 - others' rights

        вариант ответа: https://jameshfisher.com/2017/02/24/what-is-mode_t/

2 
    a. создать каталог, указанный в аргументе;
    b. вывести содержимое каталога, указанного в аргументе;
    c. удалить каталог, указанный в аргументе;
    d. создать файл, указанный в аргументе;
    e. вывести содержимое файла, указанного в аргументе;
    f. удалить файл, указанный в аргументе;
    g. создать символьную ссылку на файл, указанный в аргументе;
    h. вывести содержимое символьной ссылки, указанный в аргументе;
    i. вывести содержимое файла, на который указывает символьная ссылка, указанная в аргументе;
    j. удалить символьную ссылку на файл, указанный в аргументе;
    k. создать жесткую ссылку на файл, указанный в аргументе;
    l. удалить жесткую ссылку на файл, указанный в аргументе;
    m. вывести права доступа к файлу, указанному в аргументе и количество жестких ссылок на него;
    n. изменить права доступа к файлу, указанному в аргументе.

    нужно для примеров сделать жестких ссылок на все команды!

    показ работы программы: gcc -o file_manager file_manager.c

    create_dir: 
        ln file_manager create_dir
        ./create_dir testdir

    list_dir: 
        ln file_manager list_dir
        cd testdir
        touch text1.txt
        cd ../
        ./list_dir testdir

    remove_dir:
        ln file_manager remove_dir
        ./remove_dir testdir

    create_file:
        ln file_manager create_file
        ./create_file test_file.txt

    read_file:
        ln file_manager read_file
        ./read_file test_file.txt

    remove_file: 
        ln file_manager remove_file
        ./remove_file test_file.txt

    create_symlink:
        про функцию int symlink(const char *topath, const char *frompath): https://www.opennet.ru/man.shtml?topic=symlink&category=2&russian=0

        ln file_manager create_symlink
        touch file1.txt
        ./create_symlink file1.txt symlink_file1.txt
        cd ../
        ls -la task2

    ln file_manager print_symlink
    ln file_manager print_symlink_target
    ln file_manager remove_symlink