1
    создаю целевую директорию с перевёрнутым именем
    копирую только регулярные файлы
    переворачиваю как имена файлов, так и их содержимое

    тест: 
        mkdir testdir
        cd testdir/
        touch file1.txt
        echo "hello" > file1.txt
        cd ../
        gcc copy_reversed.c -o copy
        ./copy testdir

    про . и ..:
        ls -a	    list all files including hidden file starting with '.'.
        https://askubuntu.com/questions/54900/what-do-and-mean-when-in-a-folder
    
    про функции:
        main
            stat 
                информация о файлах

                https://www.opennet.ru/man.shtml?topic=stat&category=2&russian=0
            strdup 
                использую для создания копий строк argv[1], ибо basename может модифицировать переданную ему строку
            basename 
                извлечение последнего компонента из пути к файлу. ПРИМЕР: /home/user/docs/file.txt вернет file.txt
                ! если передавать в basename() оригинальный аргумент argv[1], функция может изменить его, что приведет к ошибкам 

                https://www.opennet.ru/man.shtml?topic=basename&category=3&russian=2
            dirname
                dirname() returns the string up to, but not including, the final '/'

                https://man7.org/linux/man-pages/man3/basename.3.html
            mkdir 
                Функция mkdir() создает каталог, используя путь, на который указывает параметр path.
                про права доступа: https://www.managedserver.eu/website-permissions-on-linux-750-and-650-vs-755-and-644/#:~:text=The%20755%20permission%20for%20directories,allows%20everyone%20to%20read%20them.

                https://www.c-cpp.ru/content/mkdir
            opendir
                открывает поток каталога и возвращает указатель на структуру типа DIR, которая содержит информацию о каталоге

                https://www.c-cpp.ru/content/closedir-opendir-readdir-rewinddir
            про dirent: https://firststeps.ru/linux/r.php?20

        copy_file_reversed
            fopen
                открывает файл, имя которого указано аргументом fname, и возвращает свя­занный с ним указатель
                Open a file and create a new stream for it
                stream нужно потом закрыть с помощью fclose

                https://www.c-cpp.ru/content/fopen
            fseek
                устанавливает указатель положения в файле, связанном со stream, в соответ­ствии со значениями offset и origin
                у меня offset 0
                SEEK_END - макрос для origin - значит указатель в конец файла

                короче - помещаем указатель В КОНЕЦ файла
                
                https://www.c-cpp.ru/content/fseek
            ftell
                так как указатель в конце файла, вернет текущую позицию (размер файла в байтах)

                https://www.c-cpp.ru/content/ftell
            rewind
                Функция rewind() перемещает указатель положения в файле на начало указанного потока
                возвращает указатель в начало для последующего чтения

                https://www.c-cpp.ru/content/rewind
            size_t fread(void *buf, size_t size, size_t count, FILE *stream)
                Функция fread() считывает count объектов — каждый объект по size символов в длину — из потока, 
                указанного stream, и помещает их в символьный массив, указанный в buf. 
                Указатель пози­ции в файле продвигается вперед на количество считанных символов.

                fread(buffer, 1, filesize, src)

                https://www.c-cpp.ru/content/fread
            size_t fwrite(const void *buf, size_t size, size_t count, FILE *stream)
                Функция fwrite() записывает count объектов — каждый объект по size символов в длину — в поток, 
                указанный stream, из символьного массива, указанного buf. 
                Указатель позиции в файле продвигается вперед на количество записанных символов.

                fwrite(buffer, 1, filesize, dest)

                https://www.c-cpp.ru/content/fwrite
            int ferror(FILE *stream)
                проверяет наличие ошибок чтения или записи в файле, связанном с потоком stream.

                https://www.c-cpp.ru/content/ferror
            fclose

    про симлинки, хардлинки и inode? 
        жёсткие ссылки (хардлинки) — это как файлы - дополнительные указатели напрямую на inode (информационный узел файловой системы).
        hardlink - это ещё одно имя для существующего inode.
        Пример: file.txt и его hardlink — два имени для одних и тех же данных.

        символические ссылки (симлинки) — это отдельные файлы (со своим inode и данными), которые хранят путь к другому файлу в файловой системе.
        это отдельный файл, который хранит путь к целевому файлу.
        Пример: symlink - указывает на /home/user/file.txt.

        НАГЛЯДНО: есть книга.txt - командой ln книга.txt хардлинк_книги.txt создал хардлинк.
                    хардлинк - просто второе название книги (резервная копия книги). если удалить книгу, то она доступна через хардлинк

                    ln -s книга.txt симлинк_книги.txt - создал ЗАКЛАДКУ "книга лежит на полке 10". перименую или удалю книгу и закладка не валидна.

        inode - структура данных в файловой системе, которая хранит метаинформацию о файле:
            Тип файла (обычный файл, каталог и т.д.),
            Права доступа,
            Временные метки,
            Указатели на блоки данных файла.
        Каждый файл имеет уникальный inode в пределах своей файловой системы. 

        Ответ: https://askubuntu.com/questions/108771/what-is-the-difference-between-a-hard-link-and-a-symbolic-link#:~:text=Hard-links%2C%20are%20just%20like,filesystem%20path%20to%20a%20file.
               . и .. - хардлинки: https://askubuntu.com/questions/54900/what-do-and-mean-when-in-a-folder
               
