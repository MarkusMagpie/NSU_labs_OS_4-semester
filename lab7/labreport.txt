1. UDP - эхо сервер:
    a. Сделайте UDP-сервер, который принимает данные от клиентов и пересылает их обратно клиенту.
    b. Напишите UDP-клиента, для теста UDP-сервера.
    c. Проверьте, что UDP-сервер, работает с несколькими клиентами.

    как запускать: 
        1 терминал
            g++ server.cpp -o server && ./server
        2 терминал
            g++ client.cpp -o client && ./client
        3 терминал
            g++ client.cpp -o client && ./client

        1 терминал
            gcc server.c -o server2 && ./server2
        2 терминал
            gcc client.c -o client2 && ./client2
        3 терминал
            gcc client.c -o client2 && ./client2

    struct sockaddr_in
        struct sockaddr_in {
            sa_family_t     sin_family;     /* AF_INET */
            in_port_t       sin_port;       /* Port number */
            struct in_addr  sin_addr;       /* IPv4 address */
        };

        в моем случае: 
            сервер: 
                server_addr.sin_family = AF_INET; // IP адрес к которому будет привязан сокет (IPv4)
                server_addr.sin_port = htons(PORT); // номер порта к которому будет привязан сокет
            клиент: 
                server_addr.sin_family = AF_INET;
                server_addr.sin_port = htons(PORT);

        Структура sockaddr_in описывает сокет для работы с протоколами IP. 
            Значение поля sin_family всегда равно AF_INET.
            Поле sin_port содержит номер порта который намерен занять процесс. 
                Если значение этого поля равно нулю, то операционная система сама выделит свободный номер порта для сокета. 
            Поле sin_addr типа структуры in_addr, содержит IP адрес к которому будет привязан сокет.
                Структура in_addr содержит поле s_addr. Этому полю можно присвоить 32х битное значение IP адреса. 

        https://www.opennet.ru/docs/RUS/socket/node4.html
        https://man7.org/linux/man-pages/man3/sockaddr.3type.html
        https://learn.microsoft.com/ru-ru/windows/win32/api/ws2def/ns-ws2def-sockaddr_in

    htons
        uint16_t htons(uint16_t hostshort);
        Функция htons() преобразует узловой порядок расположения байтов 
            положительного короткого целого hostshort в сетевой порядок расположения байтов.
        
        https://www.opennet.ru/man.shtml?topic=htons&category=3&russian=0

    socket
        int socket (int domain, int type, int protocol)
            domain - cпецификация семейства адресов
            type - cпецификация типа для нового сокета
            protocol - Используемый протокол. 
                Возможные параметры параметра протокола относятся к указанному семейству адресов и типу сокета. 

        в моем случае:
            socket(AF_INET, SOCK_DGRAM, 0)
                AF_INET - cемейство адресов IPv4 
                SOCK_DGRAM - тот тип сокета использует протокол UDP для семейства адресов Интернета. Посылаем ДАТАГРАМЫ 
                0 - вызывающий объект не хочет указывать протокол, и поставщик услуг выберет протокол для использования

        https://learn.microsoft.com/ru-ru/windows/win32/api/winsock2/nf-winsock2-socket
        https://www.opennet.ru/docs/RUS/linux_base/node245.html

    bind
        int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen)
            sockfd - дескриптор, определяющий несвязанный сокет, ему мы функцией bind задаем адрес
            addr - указатель на структуру sockaddr локального адреса, назначаемого связанному сокету
            addrlen - длина (в байтах) значения, на которое указывает addr

        в моем случае: 
            bind(server_fd, (const struct sockaddr*)&server_addr, sizeof(server_addr))

        функция используется сервером для присваивания сокету имени. До выполнения функции bind (т.е. присваивания 
            какого-либо имени, вид которого зависит от адресного домена) сокет недоступен программам-клиентам.

        https://learn.microsoft.com/ru-ru/windows/win32/api/winsock/nf-winsock-bind
        https://www.opennet.ru/docs/RUS/linux_base/node246.html

    sendto
        ssize_t sendto(int s, const void *msg, size_t len, int flags, const struct sockaddr *to, socklen_t tolen);
            s - Дескриптор, определяющий сокет
            msg - Указатель на буфер, содержащий передаваемые данные.
            len - Длина (в байтах) данных, на которые указывает параметр buf.
            flags - Набор флагов, указывающих способ вызова.
            to - Необязательный указатель на структуру sockaddr, содержащую адрес целевого сокета.
            tolen - Размер (в байтах) адреса, на который указывает параметр to.

        в моем случае:
            sendto(server_fd, buffer, msg_len, 0, (const struct sockaddr*)&client_addr, client_len)

        важно: параметр flags является битовой маской и может содержать такие флаги: 
            MSG_CONFIRM - Сообщает (на уровне связи), что процесс пересылки произошел: вы получаете успешный ответ с другой стороны.
            ...

        Функция sendto используется для записи исходящих данных в сокет. 

        https://learn.microsoft.com/ru-ru/windows/win32/api/winsock2/nf-winsock2-sendto
        https://www.opennet.ru/man.shtml?topic=sendto&category=2&russian=0
    
    recvfrom
        int recvfrom(int s, void *buf, size_t len, int flags, struct sockaddr *from, socklen_t *fromlen);
            s - Дескриптор, определяющий привязанный сокет.
            buf - Буфер для входящих данных.
            len - Длина (в байтах) буфера, на который указывает параметр buf .
            flags - Набор параметров, которые изменяют поведение вызова функции за пределами параметров, указанных для связанного сокета. 
            from - Необязательный указатель на буфер в структуре sockaddr , который будет содержать исходный адрес при возврате.
            fromlen - Необязательный указатель на размер (в байтах) буфера, на который указывает параметр from.

        в моем случае:
            сервер: recvfrom(server_fd, buffer, BUFFER_SIZE, 0, (sockaddr*)&client_addr, &client_len)
            клиент: recvfrom(client_fd, buffer, BUFFER_SIZE, 0, NULL, NULL)
            ?   2 последних параметра у клиента NULL - что это значит?
            -   информация об отправителе сообщения не сохраняется на клиенте (ибо не нужна)

        Системный вызовы recvfrom используются для получения сообщений из сокета. Возвращает длину сообщения при успешном завершении.
        Аргумент flags системного вызова recv формируется с помощью объединения логической операцией ИЛИ 
            одного или более нижеследующих значений:
            MSG_WAITALL - просит подождать, пока не придет полное запрошенное количество данных.
            ...

        https://www.opennet.ru/man.shtml?topic=recvfrom&category=2&russian=0
        https://learn.microsoft.com/ru-ru/windows/win32/api/winsock2/nf-winsock2-recvfrom

    inet_ntoa
        char *inet_ntoa(struct in_addr in);
        
        преобразует IP-адрес in, заданный в сетевом порядке расположения байтов, в стандартный строчный вид ASCII, завершающуюся NULL. 
            Строка располагается в статически размещенном буфере; последующие вызовы перепишут его данные.

        у меня используется для преобразования IPv4 адреса из бинарного формата (используется в сетевых структурах) 
            в читаемую строку в формате типа "192.168.1.1"

        https://learn.microsoft.com/ru-ru/windows/win32/api/winsock2/nf-winsock2-inet_ntoa
        https://www.opennet.ru/man.shtml?topic=inet_ntoa&category=3&russian=0#:~:text=Функция%20inet_ntoa()%20преобразует%20IP,последующие%20вызовы%20перепишут%20его%20данные.

    inet_pton
        int inet_pton(int af, const char *src, void *dst);
            af - cпецификация семейства адресов (как в socket())
            src - указатель на строку, завершающуюся значением NULL, которая содержит текстовое 
                представление IP-адреса для преобразования в двоичную форму.
            dst - указатель на буфер, в котором будет храниться двоичное представление IP адреса. 
                IP адрес возвращается в порядке байтов сети.
        
        в моем случае: 
            inet_pton(AF_INET, "127.0.0.1", &server_addr.sin_addr)
                AF_INET - cемейство адресов IPv4 
                "127.0.0.1" - преобразуемый IP адрес
                &server_addr.sin_addr - указатель на буфер, куда записать двоичное представление IP адреса

        Данная функция преобразует строку символов src в сетевой адрес (типа af), затем копирует полученную структуру с адресом в dst.
        По понятному: преобразует IP адрес из человекочитаемого строкового формата в бинарный, понятный сетевым функциям.

        https://www.opennet.ru/man.shtml?topic=inet_pton&category=3&russian=0
        https://learn.microsoft.com/ru-ru/windows/win32/api/ws2tcpip/nf-ws2tcpip-inet_pton

    ?   Что такое IP и порт?
    -   IP - числовой идентификатор хоста в сети, работающей по протоколу IP. Должен быть уникален для любого устройства в сети.
        СПРАВКА:    хост - устройство, объединяющее сеть.
                    IP (межсетевой протокол) - обеспечивает передачу данных без гарантии доставки.
        Порт - идентификатор программы или процесса, которые обслуживают сетевые соединения на заданном IP-адресе

        Представьте, что у вас дома 2 компьютера и они подключены к одному роутеру. Для всего интернета IP адрес этих 
            компьютеров одинаковый (так как внешний IP, который виден в интернете есть только у роутера). 
            В этом случае, чтобы обратиться к конкретному компьютеру, нужен порт. Например, на роутере настроено, 
            что у одного из компьютеров открыт порт 8245. Роутер имеет IP 95.84.208.79. Тогда обратиться к этому 
            компьютеру можно так: 95.84.208.79:8245
            
            IP адрес — это номер квартиры друга.
            Порт — это комната, в которой живёт друг

            https://qna.habr.com/q/844233#:~:text=Айпи-адрес%20-%20это%20адрес%20конкретного,конкретном%20компьютере%20шлется%20запрос%2C%20т.
            про порты: https://www.ittelo.ru/news/chto-takoe-port-v-seti/?srsltid=AfmBOorp-2zA1Mnurqtuc70K-Lrz_JDda0OzRAAma_09TCCyp9eXcH9W



2. ТСP - эхо сервер:
    a. Сделайте TCP-сервер, который принимает соединения от клиентов на заданном ip и port.
    b. создает новый процесс, в котором:
        i. читает данные от клиента;
        ii. пересылает их ему обратно.
    c. Напишите TCP-клиента для проверки TCP-сервера.
    d. Проверьте, что TCP-сервер работает с несколькими клиентами и обрабатывает сессии в разных процессах.

    как запускать: 
        1 терминал
            gcc server.c -o server && ./server
        2 терминал
            gcc client.c -o client && ./client

    сервер: 
        ЛОГИКА РАБОТЫ: 
            1 создаем и настраиваем TCP-сокет, байндим к порту
            2 listen() - ожидание запросов связи на сокете 
            3 while(1)
                accept() - принятие связи на сокет (новый клиент)
                печатаем ip и порт клиента 
                fork() - разделяемся: 
                    дочерний - закрывает server_fd, дальше в handle_client() читает данные, эхо-ответ, потом закрывает client_sock и exit(0)
                    родительский - закрывает client_sock(его обслуживает ребенок), возвращается к началу цикла - accept()

        socket
            int socket (int domain, int type, int protocol)
                domain - cпецификация семейства адресов
                type - cпецификация типа для нового сокета
                protocol - Используемый протокол. 
                    Возможные параметры параметра протокола относятся к указанному семейству адресов и типу сокета. 

            в моем случае:
                socket(AF_INET, SOCK_DGRAM, 0)
                    AF_INET - cемейство адресов IPv4 
                    SOCK_STREAM - тип сокета, который предоставляет виртуационные, надежные двусторонние потоки байтов на основе подключений 
                        с механизмом передачи данных OOB. Этот тип сокета использует протокол TCP  
                    0 - вызывающий объект не хочет указывать протокол, и поставщик услуг выберет протокол для использования

            https://learn.microsoft.com/ru-ru/windows/win32/api/winsock2/nf-winsock2-socket
            https://www.opennet.ru/docs/RUS/linux_base/node245.html

        listen
            int listen(int s, int backlog)
                s - сокет для прослушивания 
                backlog - целое положительное число, определяющее, как много запросов связи может быть принято на сокет одновременно.

            Функция listen используется сервером, чтобы информировать ОС, что он ожидает ("слушает") запросы связи на данном сокете. 
                Без такой функции всякое требование связи с этим сокетом будет отвергнуто.

            в моем случае: 
                listen(server_fd, 5)

            https://www.opennet.ru/docs/RUS/linux_base/node247.html#:~:text=Функция%20listen%20используется%20сервером%2C%20чтобы,int%20s%2C%20int%20backlog)%3B

        accept
            int accept(int s, char * name, int* anamelen)
                s - сокет-дескриптор для принятия связей от клиентов
                name - указатель на адрес клиента (структура sockaddr) для соответствующего домена
                anamelen - eказатель на целое число - длину структуры адреса

            Функция используется сервером для принятия связи на сокет. Сокет должен быть уже слушающим в момент вызова функции. 
                Если сервер устанавливает связь с клиентом, то функция accept возвращает новый сокет-дескриптор, 
                через который и происходит общение клиента с сервером.
            Если сервер не интересуется адресом клиента, в качестве второго и третьего аргументов можно задать NULL-указатели.

            в моем случае:
                accept(server_fd, (struct sockaddr*)&client_addr, &client_len)

            https://opennet.ru/docs/RUS/linux_base/node248.html#:~:text=Эта%20функция%20используется%20сервером%20для,происходит%20общение%20клиента%20с%20сервером.

        fork()
            При вызове fork() возникают два полностью идентичных процесса. 
                Весь код после fork() выполняется дважды, как в процессе-потомке, так и в процессе-родителе.

            https://www.opennet.ru/docs/RUS/linux_parallel/node7.html

        recv 
            int recv(int s, void *buf, size_t len, int flags)
                s - файловый дескриптор уже открытого и connected сокета 
                buf - указатель на начало буфера в памяти, куда будут скопированы входящие данные.
                len - максимальный размер этого буфера в байтах.
                flags - битовая маска, модифицирующая поведение приёма 

            чтение входящих данных в connected сокете 

            ! recv vs recvfrom: Вызов recv обычно используется соединенном сокете (см. connect(2)) и идентичен вызову recvfrom с параметром from, установленным в NULL:
                recv(sockfd, buf, len, flags)
                recvfrom(sockfd, buf, len, flags, NULL, NULL)

            в моем случае: recv(client_sock, buffer, BUFFER_SIZE, 0)

            https://www.opennet.ru/man.shtml?topic=recv&category=2&russian=0

    клиент: 
        ЛОГИКА РАБОТЫ: 
            1 socket() - создал TCP-сокет
            2 inet_pton() - конвертировал IP адрес сервера из строки в бинарный вид
            3 connect() - установил TCP-соединение с сервером
            4 ввод текста через fgets()
            5 send() - отправил введённую строку серверу
            6 recv() - получил эхо-ответ(то же самое) от сервера, печатаю
            7 close() - после завершения обмена закрыл сокет

        connect
            int connect(int sockfd, const struct sockaddr *serv_addr, socklen_t addrlen); 
                sockfd - дескриптор, определяющий неподключенные сокеты
                serv_addr - указатель на структуру sockaddr, с которой должно быть установлено соединение
                addrlen - длина структуры sockaddr в байтах, на которую указывает параметр name

            устанавливает соединение с указанным первым параметром сокетом

            в моем случае: 
                connect(client_fd, (struct sockaddr*)&server_addr, sizeof(server_addr))

            https://learn.microsoft.com/ru-ru/windows/win32/api/winsock2/nf-winsock2-connect
            https://www.opennet.ru/man.shtml?topic=connect&category=2&russian=0

        send
            int send(int s, char * buf, int len, int flags)
                s - сокет-дескриптор, в который записываются данные
                buf - адрес буфера с записываемыми данными
                len - длина этого буфера
                flags - комбинация битовых флагов, управляющих режимами записи. Если аргумент flags равен нулю, то запись в сокет 
                    (и, соответственно, считывание ) происходит в порядке поступления байтов.
            
            запись данных в connected сокет

            ! send vs sendto: обе функции при успешном возвращают число отправленных байт, или -1 при ошибке. 
                НО:
                    send() работает только на подключённых (connected) сокетах и не требует указания адреса получателя
                    sendto() может применяться на любых сокетах (как подключённых, так и неконнектных) и дополнительно принимает параметры адреса получателя
                ответ: https://www.reddit.com/r/C_Programming/comments/xlwsdy/send_vs_sendto/
                    send() is for connected sockets (ie, TCP is the most common usage), 
                        while sendto() is for sockets which don't require a connected state ( ie, UDP)
            send(sockfd, buf, len, flags);
            sendto(sockfd, buf, len, flags, NULL, 0);


            https://www.opennet.ru/cgi-bin/opennet/man.cgi?topic=send&category=2
    
    ?   почему запуск сервер, клиент, завершение сервер, клиент вызывал bind failed?
    -   после завершения сервера порт какое-то время остается в состоянии TIME_WAIT. 
            Это поведение TCP для гарантии корректного завершения соединения.

        добавил в server.c следующее: 
            int opt = 1;
            if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt))) {
                printf("setsockopt failed");
                close(server_fd);
                exit(EXIT_FAILURE);
            } 
        SO_REUSEADDR позволяет переиспользовать порт сразу после завершения сервера. даже если он в состоянии TIME_WAIT

        SOL_SOCKET - уровень на котором работает опция SO_REUSEADDR. работаем с опциями уровня сокета (не конкретно для какого-то протокола)

        можно показать: 
            sudo lsof -i :5000

        какие есть состояния портов: https://ip-calculator.ru/blog/ask/chto-za-sostoyaniya-close_wait-i-time_wait/
        хороший ответ: https://superuser.com/questions/173535/what-are-close-wait-and-time-wait-states

        https://learn.microsoft.com/ru-ru/windows/win32/winsock/using-so-reuseaddr-and-so-exclusiveaddruse

    ?   зачем нужен TIME_WAIT если сокет уже недоступен через bind?
    -   1 вар:  порт в состоянии TIME_WAIT считается занятым, чтобы предотвратить конфликты между старыми и новыми соединениями.
                новый процесс сервера пытается использовать порт 5000, на котором еще висит старое соединение.
        
        2 вар:  TIME_WAIT - это страховка от: 
                    1) потеря важных пакетов (трансфер денег ниже)
                    2) смешение данных между старыми и новыми соединениями

        типа закрываю дверь и жду несколько минут перед тем как уйти. ибо если уйти сразу то могу пропустить что-то с другого конца (эй забыл ключи!)

        после закрытия сокета надо подождать 2 периода (2x FIN+ACK). 
            Тогда все пакеты, которые по сети гуляли но не дошли до нас вовремя, будут проигнорированы. 
            В противном случае их получила бы другая программа. Вдруг бы там секретные данные были, 
            а следующая программа, открывая тот же порт могла бы их схавать.

        in order to ensure that all packets generated during the duration of this connection 
            disappear from the network, that is, to ensure that when a new TCP connection is established, 
            the old duplicate packets from the connection are already in Disappeared from the network. 
        взял отсюда: https://stackoverflow.com/questions/25338862/why-time-wait-state-need-to-be-2msl-long

        пример: онлайн банк (приложение клиент-сервер)
            1 установка соединения - 3 рукопожатие (обмен клинета и сервера SYN, ACk) 
            2   клиент пишет банку сообщение: transfer 1000
                сервер подтверждает пересылку денег - ACK
            3 закрытие - сервер отправляет FIN для завершения сессии, клиент отвечает ACK и ждет некоторое время 

            1 проблема: 
                последний ACK от сервера утерян
                тогда клиент повторно отправит FIN
                если бы не было времени ожидания, то сервер проигнорирует повторный FIN сервера
                значит клиент будет считать соединение активным, а сервер нет. тогда списание денег может произойти дважды

        про завершение соединения с википедии: https://en.wikipedia.org/wiki/Transmission_Control_Protocol#Connection_termination



3. Реализуйте задачу из пункта 2 при помощи мультиплексирования ввода-вывода poll(2)/select(2).
    как запускать: 
        1 терминал
            gcc server.c -o server && ./server
        2 терминал
            gcc client.c -o client && ./client

    мультиплексирование: 
        1 I/O multiplexing is the the ability to perform I/O operations on multiple file descriptors.
        2 один процесс в блокирующем виде ожидает готовности нескольких файловых дескрипторов 
            и, когда ОС сигнализирует об активности каком-то дескрипторе, обрабатывает именно его, 
            не создавая для каждого нового соединения отдельный поток или процесс

    клиент: 
        без изменений
    сервер:
        логика работы: 
            1 создаёт слушающий сокет и настраивает его на повторное использование порта (как во 2 задании 1в1)
            2 используем select для отслеживания активности на множестве сокетов
            3 принимаем новые подключения и добавляем их в массив client_sockets
            4 читаем данные от активных клиентов из client_sockets и отправляет их обратно (эхо-ответ)
            5 закрываем сокеты и удаляем их из отслеживаемого множества при отключении клиентов
        команды: 
            FD_ZERO - обнуление всего множества
                #define __FD_ZERO(s) \
                do {									      \
                    unsigned int __i;							      \
                    fd_set *__arr = (s);						      \
                    for (__i = 0; __i < sizeof (fd_set) / sizeof (__fd_mask); ++__i)	      \
                        __FDS_BITS (__arr)[__i] = 0;					      \
                } while (0)

                sizeof(fd_set) / sizeof(__fd_mask) - сколько слов __fd_mask хранится в fd_set
                цикл for обходит каждое слово массива __FDS_BITS и присваивает ему 0
                РЕЗУЛЬТАТ: все биты (т.е. все дескрипторы) помечены как недоступные для чтения

            FD_SET - установка бита дескриптора
                #define __FD_SET(d, s) \
                ((void) (__FDS_BITS (s)[__FD_ELT(d)] |= __FD_MASK(d)))

                __FD_ELT(d) даёт номер слова в массиве, где хранится бит для дескриптора d
                __FD_MASK(d) формирует маску, у которой 1 - именно та позиция (бит внутри слова), что соответствует d
                |= - побитовое "или" - устанавливаю в 1 нужный бит, не затрагивая другие

            FD_ISSET - проверка бита дескриптора
                #define __FD_ISSET(d, s) \
                ((__FDS_BITS (s)[__FD_ELT (d)] & __FD_MASK (d)) != 0)

                берём слово __FDS_BITS[__FD_ELT(d)] и маскируем его операцией & __FD_MASK(d)
                if результат != 0, значит бит был установлен (=1) - дескриптор присутствует в множестве. Иначе - нет.

            FD_CLR - сброс бита дескриптора
                #define __FD_CLR(d, s) \
                ((void) (__FDS_BITS (s)[__FD_ELT(d)] &= ~__FD_MASK(d)))

                1 в 1 как и в FD_SET находим слово и формируем маску
                ~__FD_MASK(d) - инвертированная маска, у которой только нужный бит = 0, остальные 1
                &= (обнуляет) этот бит, сохраняя все остальные биты без изменений

            select 
                int select(int n, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout)
                    n - количество дескрипторов которые следят за изменением статуса
                    *readfds - указатель на множество дескрипторов сокетов, которые следят за изменением статуса для чтения
                    *writefds - указатель на множество дескрипторов сокетов, которые следят за изменением статуса для записи
                    *exceptfds - указатель на множество дескрипторов сокетов, которые следят за изменением статуса для исключений
                    *timeout - указатель на структуру timeval, содержащую время ожидания в секундах и миллисекундах

                ждет изменения статуса хотя бы одного из файловых описателей
                ВОЗВРАЩАЕТ: общее количество дескрипторов сокетов, которые готовы и содержатся в структурах fd_set

                в моем случае: 
                    select(max_fd + 1, &temp_fds, NULL, NULL, NULL)
                    блокируется выполнение пока хотя бы 1 из temp_fds не готов к чтению 

                https://www.opennet.ru/man.shtml?topic=select&category=2&russian=0
                https://learn.microsoft.com/ru-ru/windows/win32/api/winsock2/nf-winsock2-select

                english only: Before select() is called, the application creates one or more of the 
                    readfds, writefds, or exceptfds bitmaps, by asserting bits corresponding to the set of interesting file descriptors. 
                    On its return, select() overwrites these bitmaps with new values, corresponding to subsets of the input sets, 
                    indicating which file descriptors are available for I/O.
                отсюда: https://www.usenix.org/legacy/event/usenix99/full_papers/banga/banga_html/node3.html

            getpeername
                int getpeername(int s, struct sockaddr *name, socklen_t *namelen)
                    s - дескриптор сокета
                    name - указатель на структуру с информацией о соединении
                    namelen - указатель на длину структуры name

                получает имя машины, подключившейся к сокету s. namelen инициализирован в целях отображения объема памяти, который занимает name.
                    По возвращении он содержит размер памяти, занимаемый именем машины (байт).
                ВОЗВРАЩАЕТ: при удачном завершении возвращается 0. При ошибке -1.

                в моем случае: 
                    getpeername(sd, (struct sockaddr*)&client_addr, &client_len);

                https://www.opennet.ru/man.shtml?topic=getpeername&category=2&russian=0

    ?   почему select перебирая ФД не сжигает ресурс процессора
    -   когда вызываю select() с таймаутом NULL, процесс переходит в состояние "ожидания события" в ядре - 
            система ставит его в очередь "заблокированных" задач (не активен, не потребляет CPU), освобождая CPU для других задач, 
            до тех пор, пока не пройзойдет что-то на отслеживаемых fd. 
            Как только на любом из отслеживаемых fd появляется готовность (например, 
            новые данные (у меня это входящее соединение)), ядро "пробуждает" процесс и возвращает 
            управление в приложение (user space). Между этими событиями ваш процесс не потребляет 
            такты CPU.
        Если бы в коде был busy-wait - код в пользовательском пространстве в цикле без остановок постоянно опрашивает условие.
            ПРИМЕР: while (!ready) {}
            то нагрузка на CPU действительно будет расти.

        select() блокируется в kernel space (а значит не потребляет CPU), он не опрашивает дескрипторы в user space. 

        select() starts by checking, for each descriptor present in the input bitmaps, whether that descriptor 
            is already available for I/O. If none are available, then select() blocks. Later, when a protocol 
            processing (or file system) module's state changes to make a descriptor readable or writable, 
            that module awakens the blocked process. The awakened process has no idea which descriptor 
            has just become readable or writable, so it must repeat its initial scan.

        распорядок дня select(): 
            0 (до вызова select()) - application creates one or more of the readfds, writefds, or exceptfds 
                bitmaps, by asserting bits corresponding to the set of interesting file descriptors
            1 в user space: скан битмапов readfds, writefds, и exceptfds на наличие готовых дескрипторов
            2 если нет, то select() блокируется (переход в kernel space)
            3 ядро мониторит состояния всех регистрируемых fd
            4 если на любом из fd появляется готовность, то select() пробуждается (переход в user space)
            5 скан битмапов

            возвращает обновленные битмапы с готовыми дескрипторами

        взял отсюда: https://www.usenix.org/legacy/event/usenix99/full_papers/banga/banga_html/node3.html

    ?   как recv() понимает что связь с клиентом закончена? 
    -   The connected TCP socket on the client is not returning an error when the server closes the connection. 
            It simply returns 0 bytes read.

        return value 0 from recv() always means the other end will not (be able to) transmit any more data.

        взял отсюда: https://www.linuxquestions.org/questions/programming-9/client-tcp-socket-recv-returning-0-when-server-closes-the-connection-4175412549
        еще варие ответа: https://stackoverflow.com/questions/38021659/can-a-c-socket-recv-0-bytes-without-the-client-shutting-the-connection

3.2. Не должно быть блокирующих операций кроме select()

    как запускать: 
        1 терминал
            gcc server.c -o server && ./server
        2 терминал
            gcc client.c -o client && ./client
    
    typedef struct {
        int fd; 
        char outbuf[OUTBUF_SIZE];
        size_t out_head; 
        size_t out_tail;
    } client_t;

    client_t - храненит информацию о каждом подключённом клиенте в сервере. fd поле хранит дескриптор клиентского сокета, 
        а поля outbuf, out_head и out_tail реализуют кольцевой буфер, который аккумулирует данные, подлежащие отправке 
        клиенту. 
        out_tail - индекс в outbuf, куда следует записывать новые данные («хвост» буфера)
        out_head - индекс в outbuf, с которого нужно брать данные для отправки («голова» буфера)


    после создания сокета я сразу вызываю функцию make_nonblocking, чтобы установить его в не блокирующее состояние:

        int make_nonblocking(int fd) {
            int flags = fcntl(fd, F_GETFL, 0);
            if (flags < 0) return -1;
            return fcntl(fd, F_SETFL, flags | O_NONBLOCK);
        }
    
        fcntl(fd, F_GETFL, 0) - F_GETFL - получаю текущие флаги состояния для открытого fd.
        если fd некорректен, то fcntl вернет -1
        fcntl(fd, F_SETFL, flags | O_NONBLOCK) - устанавливаю новые флаги состояния для fd - добавил O_NONBLOCK:
            O_NONBLOCK означает "неблокирующий ввод-вывод": операции read(), recv() и write(), send() в этом режиме 
            не будут зацикливаться, если нет данных и/или буферы полны. Вместо блокировки они вернут -1.


        if (errno != EAGAIN && errno != EWOULDBLOCK) {
            printf("accept error");
        }

        если сокет не помечен как O_NONBLOCK, то при отсутствии входящих подключений, accept() блокируется, 
            пока соединение не появится.
        а если сокет уже в неблокирующем режиме (установили O_NONBLOCK через fcntl), то при отсутствии входящих 
            подключений accept() не заблокируется, а сразу вернёт -1, с кодом ошибки EAGAIN или EWOULDBLOCK:
            EAGAIN (Error, Try Again) / EWOULDBLOCK (Error, Would Block): 
                операция(accept()) не может быть выполнена прямо сейчас, т.к. она блокировала бы поток, но мы в неблокирующем 
                    режиме - попробуйте ещё раз позже!


    в пункте 5.1 - обработке дескрипторов готовых к чтению запись эхо-ответа происходит по-новому:
        size_t used = (c->out_tail + OUTBUF_SIZE - c->out_head) % OUTBUF_SIZE;
        size_t free_space = OUTBUF_SIZE - used;
        size_t to_copy = bytes_read < free_space ? bytes_read : free_space;
        size_t tail = c->out_tail;
        size_t part1 = to_copy < (OUTBUF_SIZE - tail) ? to_copy : (OUTBUF_SIZE - tail);
        memcpy(c->outbuf + tail, buf, part1);
        memcpy(c->outbuf, buf + part1, to_copy - part1);
        c->out_tail = (tail + to_copy) % OUTBUF_SIZE;

        used - число байт, которые уже скопированы в буфер и ещё не отправлены клиенту,
            out_tail - индекс в outbuf после последнего скопированного байта 
            out_head - индекс в outbuf, указывающий на первый байт, который ещё не был отправлен клиенту
            вычисляю длину между этими индексами по модулю OUTBUF_SIZE
        free_space - число байт, которые свободны в буфере
        to_copy - число байт, которые нужно скопировать в буфер
            bytes_read - количество байт, полученных recv()
            если получил меньше байт, чем свободно в буфере, то копируем с буффер полученные байты, 
                иначе копируем байты свободные в буфере
        tail - храню текущий хвост в локальной переменной
        part1 - число байт, которое можно сразу скопировать без перехода через границу массива
            OUTBUF_SIZE - tail - максимальное число байт, которое можно записать непрерывно от tail до конца массива outbuf
            если to_copy < OUTBUF_SIZE - tail, то весь блок, который мы хотим скопировать, поместится "до конца" outbuf; 
            а иначе: сначала копируем (OUTBUF_SIZE - tail) байт до конца массива, а оставшиеся (to_copy − (OUTBUF_SIZE − tail)) 
            байт запишем в начало outbuf
        memcpy(c->outbuf + tail, buf, part1) - копирую part1 байт из buf в outbuf, начиная с индекса tail
            это запись до конца массива outbuf
        memcpy(c->outbuf, buf + part1, to_copy - part1) - копирую невлезшие (to_copy - part1) байт из buf в outbuf, если они есть
        c->out_tail - сдвиг хвоста активного клиента:
            tail + to_copy - сдвигаю текущий хвост на количество скопированных байт
            % OUTBUF_SIZE - чтобы не выходить за границу outbuf
            c->out_tail - указатель на ячейку в outbuf, с которой начнется копирование данных при следующем приеме пакетов

    в пункте 5.2 - обработка дескрипторов готовых к записи:
        if (FD_ISSET(fd, &temp_write)) {
            size_t used = (c->out_tail + OUTBUF_SIZE - c->out_head) % OUTBUF_SIZE;
            if (used > 0) {
                size_t head = c->out_head;
                size_t chunk = used < (OUTBUF_SIZE - head) ? used : (OUTBUF_SIZE - head);
                ssize_t bytes_send = send(fd, c->outbuf + head, chunk, 0);
                printf("отправлено сообщение: %s\n", c->outbuf + head);
                if (bytes_send > 0) {
                    c->out_head = (head + bytes_send) % OUTBUF_SIZE;
                } else if (bytes_send < 0 && (errno != EAGAIN && errno != EWOULDBLOCK)) {
                    FD_CLR(fd, &master_read);
                    FD_CLR(fd, &master_write);
                    close(fd);
                    printf("ошибка send, не связана с блокировкой: %s\n", strerror(errno));
                    c->fd = 0;
                }
            }
        }

        used - число байт, которые уже скопированы в буфер и ещё не отправлены клиенту
        head - индекс в outbuf, указывающий на первый байт, который ещё не был отправлен клиенту
        chunk - число байт, которые нужно отправить клиенту:
            OUTBUF_SIZE - head - это максимальный размер непрерывной области до конца массива outbuf
            used < (OUTBUF_SIZE - head) - значит весь непросланный объём укладывается без оборачивания в конец массива
            иначе - часть данных находится в сегменте [head ... OUTBUF_SIZE−1], а другая - после оборачивания в [0 .. out_tail−1]
                и будем отправлять клиенту только OUTBUF_SIZE - head байт - первую непрерывную часть.
        bytes_send - число байт, которые мы можем отправить: это до chunk байт, начиная с адреса outbuf + head.
        если смогли отправить какое-то положительное к-во байт клиенту то обновляем указатель головы:
            c->out_head = (head + bytes_send) % OUTBUF_SIZE;
            ! bytes_send байт теперь точно помечены как отправленные и больше не относятся к ожидающим отправки.
        обработка ошибок (ошибка отлична от EAGAIN и EWOULDBLOCK - данные не отправляются):
            FD_CLR(fd, &master_read) и FD_CLR(fd, &master_write) - удаляем дескриптор fd из наборов, чтобы select() 
                больше не следил за этим сокетом
            close(fd) - закрываем сокет
            c->fd = 0 - помечаем слот clients[i] как свободный

    fcntl()
        int fcntl(int fd, int cmd, long arg)
        выполняет одну из различных дополнительных операций над файловым дескриптором fd. 
            Эта операция определяется содержимым аргумента cmd

        в моем случае:
            fcntl(fd, F_SETFL, flags | O_NONBLOCK)
                если флаг O_NONBLOCK не установлен, сискол блокируется до тех пор, пока блокировка
                    не будет снята или не переведена в режим, совместимый с запрашиваемым доступом. 
                Если же флаг O_NONBLOCK установлен, сискол завершается с ошибкой EAGAIN.
            взято из мана: https://man7.org/linux/man-pages/man2/fcntl.2.html